package compiler.parser;

import compiler.scanner.Scanner;
import compiler.ast.*;

import java.util.*;
import java_cup.runtime.*;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.FileReader;
import java.io.IOException;

parser code {:
    private Scanner scanner;

    public Parser(Scanner scanner) {
        this.scanner = scanner;
    }

    public Symbol scan() throws Exception {
        return scanner.next_token();
    }

    public void syntax_error(Symbol s) {
        report_error(
            "Error de sintaxis en línea " + (s.left) + ", columna " + (s.right)
            + ". Token inesperado: " + s.value, null
        );
    }
:}

/* Terminales */
terminal CLASS, VOID;
terminal IF, ELSE, FOR, WHILE, RETURN, BREAK, CONTINUE, CALLOUT, NEW;
terminal COMMA, SEMI;
terminal ASSIGN, UMINUS, PLUS_ASSIGN, MINUS_ASSIGN;
terminal PLUS, MINUS, TIMES, DIVIDE, MOD;
terminal EQ, NEQ, LT, GT, LE, GE; 
terminal INT, BOOLEAN, CHAR;
terminal AND, OR, NOT;
terminal TRUE, FALSE;
terminal LBRACE, RBRACE, LPAREN, RPAREN, LBRACKET, RBRACKET;
terminal Integer INT_LITERAL;
terminal String ID, STRING_LITERAL, CHAR_LITERAL;

/* No terminales */
non terminal ProgramNode programNode;
non terminal StatementNode forUpdateStmtNode;
non terminal List<VarDeclaration> varDeclListNode;
non terminal String assignOperatorNode;
non terminal List<CalloutArgument> calloutArgListOptNode, calloutArgListNode;
non terminal BlockNode blockNode;
non terminal List<StatementNode> stmtListNode;
non terminal List<ClassMember> classMemberListNode;
non terminal AssignmentExpression assignExprNode;
non terminal List<ExpressionNode> exprListNode, exprListOptNode;
non terminal List<Parameter> paramListNode;
non terminal MethodCallNode methodCallNode;
non terminal IntegerLiteral intLiteralNode;
non terminal VariableNode optionalArrayIdNode;
non terminal ExpressionNode exprNode, exprOptNode;
non terminal List<VarDeclaration> varDeclNode;
non terminal CharacterLiteral charLiteralNode;
non terminal StatementNode stmtNode;
non terminal BooleanLiteral boolLiteralNode;
non terminal List<VariableNode> idArrayListNode;
non terminal String binaryOperatorNode, arithmeticOperatorNode, relationalOperatorNode, equalityOperatorNode, conditionalOperatorNode;
non terminal DataTypeNode typeNode;
non terminal StatementNode forInitExprNode;
non terminal ExpressionNode assignOptNode;
non terminal CalloutArgument calloutArgNode;
non terminal LocationNode locationNode;
non terminal Parameter paramNode;
non terminal LiteralNode literalNode;
non terminal String methodNameNode;
non terminal ClassMember classMemberNode;

/* Precedencias */
precedence left OR;
precedence left AND;
precedence nonassoc EQ, NEQ;
precedence nonassoc LT, GT, LE, GE;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence right UMINUS;
precedence right NOT;

/* Símbolo inicial */
start with programNode;

/* Reglas de la gramática */

programNode ::= CLASS:c ID:name LBRACE classMemberListNode:members RBRACE
                {:
                    int line = cleft + 1;
                    int column = cright + 1;
                    RESULT = new ProgramNode(name, members, line, column);
                :};

classMemberListNode ::= classMemberListNode:members classMemberNode:member
                         {: members.add(member); RESULT = members; :}
                      | /* vacío */
                         {: RESULT = new ArrayList<>(); :};

classMemberNode ::= typeNode:type idArrayListNode:variables SEMI:s
                     {:
                         int line = variables.get(0).getLine();
                         int column = variables.get(0).getColumn();

                         List<VarDeclaration> members = new ArrayList<>();
                         for (VariableNode var : variables) {
                             members.add(new VarDeclaration(type, var.getName(), var.isArray(), null, var.getLine(), var.getColumn()));
                         }
                         RESULT = new MultipleVarDeclaration(members, line, column);
                     :}

                  | VOID:v ID:name LPAREN paramListNode:params RPAREN blockNode:block
                     {:
                         int line = vleft + 1;
                         int column = vright + 1;
                         RESULT = new MethodDeclaration(new VoidTypeNode(line, column), name, params, block, line, column);
                     :}
                     
                  | typeNode:type ID:name LPAREN paramListNode:params RPAREN blockNode:block
                     {:
                         int line = type.getLine();
                         int column = type.getColumn();
                         RESULT = new MethodDeclaration(type, name, params, block, line, column);
                     :};

optionalArrayIdNode ::= ID:id
                         {:
                             int line = idleft + 1;
                             int column = idright + 1;
                             RESULT = new VariableNode(id, false, line, column);
                         :}
                      | ID:id LBRACKET LBRACKET
                         {:
                             int line = idleft + 1;
                             int column = idright + 1;
                             RESULT = new VariableNode(id, true, line, column);
                         :};

assignOptNode ::= ASSIGN exprNode:expr
                   {: RESULT = expr; :}
                | /* vacío */
                   {: RESULT = null; :};

paramListNode ::= paramListNode:params COMMA paramNode:param
                   {: params.add(param); RESULT = params; :}
                | paramNode:param
                   {:
                       List<Parameter> params = new ArrayList<>();
                       params.add(param);
                       RESULT = params;
                   :}
                | /* vacío */
                   {: RESULT = new ArrayList<>(); :};

paramNode ::= typeNode:type optionalArrayIdNode:var
               {:
                   int line = var.getLine();
                   int column = var.getColumn();
                   RESULT = new Parameter(type, var.getName(), var.isArray(), line, column);
               :};

blockNode ::= LBRACE:l varDeclListNode:varDecls stmtListNode:stmts RBRACE
                {:
                   int line = lleft + 1;
                   int column = lright + 1;
                   RESULT = new BlockNode(varDecls, stmts, line, column);
               :};
varDeclListNode ::= varDeclListNode:varDecls varDeclNode:varDecl
                     {: varDecls.addAll(varDecl); RESULT = varDecls; :}
                  | /* vacío */
                     {: RESULT = new ArrayList<>(); :};

varDeclNode ::= typeNode:type idArrayListNode:variables assignOptNode:assignOpt SEMI
                 {:
                     List<VarDeclaration> declarations = new ArrayList<>();
                     for (VariableNode var : variables) {
                        int line = var.getLine();
                        int column = var.getColumn();                        
                        declarations.add(new VarDeclaration(type, var.getName(), var.isArray(), assignOpt, line, column));
                     }
                     RESULT = declarations;
                 :};

idArrayListNode ::= idArrayListNode:variables COMMA optionalArrayIdNode:var
                     {: variables.add(var); RESULT = variables; :}
                  | optionalArrayIdNode:var
                     {:
                         List<VariableNode> variables = new ArrayList<>();
                         variables.add(var);
                         RESULT = variables;
                     :};

stmtListNode ::= stmtListNode:stmts stmtNode:stmt
                  {: stmts.add(stmt); RESULT = stmts; :}
               | /* vacío */
                  {: RESULT = new ArrayList<>(); :};

stmtNode ::= locationNode:loc assignOperatorNode:op exprNode:expr SEMI:s
               {:
                  int line = loc.getLine();
                  int column = loc.getColumn();
                  RESULT = new AssignmentStatement(loc, op, expr, line, column);
              :}

            | methodCallNode:methodCall SEMI:s
              {:
                  int line = methodCall.getLine();
                  int column = methodCall.getColumn();
                  RESULT = new MethodCallStatement(methodCall, line, column);
              :}

           | IF:i LPAREN exprNode:cond RPAREN blockNode:thenBlock ELSE:e blockNode:elseBlock
               {:
                  int line = ileft + 1;
                  int column = iright + 1;
                  RESULT = new IfStatement(cond, thenBlock, elseBlock, line, column);
              :}

           | IF:i LPAREN exprNode:cond RPAREN blockNode:thenBlock
               {:
                  int line = ileft + 1;
                  int column = iright + 1;
                  RESULT = new IfStatement(cond, thenBlock, null, line, column);
              :}           
              
            | WHILE:w LPAREN exprNode:cond RPAREN blockNode:bodyBlock
              {: 
                  int line = wleft + 1;
                  int column = wright + 1;
                  RESULT = new WhileStatement(cond, bodyBlock, line, column); 
             :}

           | FOR:f LPAREN ID:id ASSIGN forInitExprNode:initExpr SEMI exprOptNode:cond SEMI forUpdateStmtNode:updateStmt RPAREN blockNode:bodyBlock
              {:
                  int line = fleft + 1;
                  int column = fright + 1;
                  String varName = id.toString(); 
                  RESULT = new ForStatement(varName, initExpr, cond, updateStmt, bodyBlock, line, column); 
              :}

           | RETURN:r exprOptNode:exprOpt SEMI:s
               {:
                  int line = rleft + 1;
                  int column = rright + 1;
                  RESULT = new ReturnStatement(exprOpt, line, column);
              :}

           | BREAK:b SEMI:s
               {:
                  int line = bleft + 1;
                  int column = bright + 1;
                  RESULT = new BreakStatement(line, column);
              :}      

           | CONTINUE:c SEMI:s
              {:
                  int line = cleft + 1;
                  int column = cright + 1;
                  RESULT = new ContinueStatement(line, column);
              :}           
              
           | blockNode:block
              {: RESULT = block; :};

forInitExprNode ::= typeNode:type optionalArrayIdNode:var assignOperatorNode:op exprNode:expr
                     {:
                         int line = type.getLine();
                         int column = type.getColumn();
                         VarDeclaration varDecl = new VarDeclaration(type, var.getName(), var.isArray(), null, line, column);

                         int exprLine = type.getLine(); // O de otro símbolo relevante
                         int exprColumn = type.getColumn();
                         RESULT = new VarDeclarationStatement(varDecl, expr, exprLine, exprColumn);
                     :}

                  | assignExprNode:assignExpr
                     {:
                         int line = assignExpr.getLine();
                         int column = assignExpr.getColumn();
                         RESULT = new ExpressionStatement(assignExpr, line, column);
                     :}
                  
                  | exprNode:expr
                     {:
                         int line = expr.getLine();
                         int column = expr.getColumn();
                         RESULT = new ExpressionStatement(expr, line, column);
                     :}

                  | /* vacío */
                     {: RESULT = null; :};

exprOptNode ::= exprNode:expr
                 {: RESULT = expr; :}
              | /* vacío */
                 {: RESULT = null; :};

forUpdateStmtNode ::= assignExprNode:assignExpr
                        {:
                            int line = assignExpr.getLine();
                            int column = assignExpr.getColumn();
                            RESULT = new ExpressionStatement(assignExpr, line, column);
                        :}                    
                        
                        | exprNode:expr
                        {:
                            int line = expr.getLine();
                            int column = expr.getColumn();
                            RESULT = new ExpressionStatement(expr, line, column);
                        :}
                        
                    | /* vacío */
                       {: RESULT = null; :};

assignExprNode ::= locationNode:loc assignOperatorNode:op exprNode:expr
                     {:
                        int line = loc.getLine();
                        int column = loc.getColumn();
                        RESULT = new AssignmentExpression(loc, op, expr, line, column);
                    :};

assignOperatorNode ::= ASSIGN
                        {: RESULT = "="; :}
                     | PLUS_ASSIGN
                        {: RESULT = "+="; :}
                     | MINUS_ASSIGN
                        {: RESULT = "-="; :};

locationNode ::= ID:id
                  {:
                      int line = idleft + 1;
                      int column = idright + 1;
                      RESULT = new VariableLocation(id, line, column);
                  :}
                  
                  | ID:id LBRACKET exprNode:expr RBRACKET
                  {:
                      int line = idleft + 1;
                      int column = idright + 1;
                      RESULT = new ArrayLocation(id, expr, line, column);
                  :};

methodCallNode ::= methodNameNode:name LPAREN exprListOptNode:args RPAREN:p
                  {:
                        int line = pleft + 1;
                        int column = pright + 1;
                        RESULT = new NormalMethodCallNode(name, args, line, column);
                  :}

                  | CALLOUT:c LPAREN STRING_LITERAL:strLit calloutArgListOptNode:args RPAREN:p
                     {:
                        int line = cleft + 1;
                        int column = cright + 1;
                        RESULT = new CalloutCallNode(strLit, args, line, column);
                    :};

methodNameNode ::= ID:name
                    {: RESULT = name; :};

exprListOptNode ::= exprListNode:exprList
                     {: RESULT = exprList; :}
                  | /* vacío */
                     {: RESULT = new ArrayList<>(); :};

exprListNode ::= exprListNode:exprs COMMA exprNode:expr
                  {: exprs.add(expr); RESULT = exprs; :}
               | exprNode:expr
                  {:
                      List<ExpressionNode> exprs = new ArrayList<>();
                      exprs.add(expr);
                      RESULT = exprs;
                  :};

calloutArgListOptNode ::= COMMA calloutArgListNode:args
                           {: RESULT = args; :}
                        | /* vacío */
                           {: RESULT = new ArrayList<>(); :};

calloutArgListNode ::= calloutArgListNode:args COMMA calloutArgNode:arg
                        {: args.add(arg); RESULT = args; :}
                     | calloutArgNode:arg
                        {:
                            List<CalloutArgument> args = new ArrayList<>();
                            args.add(arg);
                            RESULT = args;
                        :};

calloutArgNode ::= exprNode:expr
                    {: RESULT = new CalloutArgumentExpression(expr); :}
                 | STRING_LITERAL:strLit
                    {: RESULT = new CalloutArgumentString(strLit); :};

exprNode ::= locationNode:loc
              {: RESULT = loc; :}
           | methodCallNode:methodCall
              {: RESULT = methodCall; :}
           | literalNode:lit
              {: RESULT = lit; :}
           | exprNode:leftExpr binaryOperatorNode:op exprNode:rightExpr
               {:
                  int line = leftExpr.getLine();
                  int column = leftExpr.getColumn();
                  RESULT = new BinaryExpression(leftExpr, op, rightExpr, line, column);
              :}

           | MINUS:m exprNode:expr
              {:
                  int line = mleft + 1;
                  int column = mright + 1;
                  RESULT = new UnaryExpression("-", expr, line, column);
              :} %prec UMINUS

           | NOT:n exprNode:expr
              {:
                  int line = nleft + 1;
                  int column = nright + 1;
                  RESULT = new UnaryExpression("!", expr, line, column);
              :}

           | NEW:n typeNode:type LBRACKET exprNode:expr RBRACKET
               {:
                  int line = nleft + 1;
                  int column = nright + 1;
                  RESULT = new NewArrayExpression(type, expr, line, column);
              :}           
           | LPAREN exprNode:expr RPAREN
              {: RESULT = expr; :};

binaryOperatorNode ::= arithmeticOperatorNode:op
                        {: RESULT = op; :}
                     | relationalOperatorNode:op
                        {: RESULT = op; :}
                     | equalityOperatorNode:op
                        {: RESULT = op; :}
                     | conditionalOperatorNode:op
                        {: RESULT = op; :};

arithmeticOperatorNode ::= PLUS
                            {: RESULT = "+"; :}
                         | MINUS
                            {: RESULT = "-"; :}
                         | TIMES
                            {: RESULT = "*"; :}
                         | DIVIDE
                            {: RESULT = "/"; :}
                         | MOD
                            {: RESULT = "%"; :};

relationalOperatorNode ::= LT
                            {: RESULT = "<"; :}
                         | GT
                            {: RESULT = ">"; :}
                         | LE
                            {: RESULT = "<="; :}
                         | GE
                            {: RESULT = ">="; :};

equalityOperatorNode ::= EQ
                          {: RESULT = "=="; :}
                       | NEQ
                          {: RESULT = "!="; :};

conditionalOperatorNode ::= AND
                             {: RESULT = "&&"; :}
                          | OR
                             {: RESULT = "||"; :};

literalNode ::= intLiteralNode:intLit
                 {: RESULT = intLit; :}
              | charLiteralNode:charLit
                 {: RESULT = charLit; :}
              | boolLiteralNode:boolLit
                 {: RESULT = boolLit; :};

intLiteralNode ::= INT_LITERAL:value
                     {:
                        int line = valueleft + 1;
                        int column = valueright + 1;
                        RESULT = new IntegerLiteral(value, line, column);
                    :};

charLiteralNode ::= CHAR_LITERAL:value
                     {:
                         int line = valueleft + 1;
                         int column = valueright + 1;
                         RESULT = new CharacterLiteral(value.charAt(0), line, column);
                     :};

/* Literales booleanos */
boolLiteralNode ::= TRUE:t
                     {:
                         int line = tleft + 1;
                         int column = tright + 1;
                         RESULT = new BooleanLiteral(true, line, column);
                     :}
                  | FALSE:f
                     {:
                         int line = fleft + 1;
                         int column = fright + 1;
                         RESULT = new BooleanLiteral(false, line, column);
                     :};

/* Tipos de dato */
typeNode ::= INT:i
              {:
                  int line = ileft + 1;
                  int column = iright + 1;
                  RESULT = new IntegerTypeNode(line, column);
              :}
           | BOOLEAN:b
              {:
                  int line = bleft + 1;
                  int column = bright + 1;
                  RESULT = new BooleanTypeNode(line, column);
              :}
           | CHAR:c
              {:
                  int line = cleft + 1;
                  int column = cright + 1;
                  RESULT = new CharacterTypeNode(line, column);
              :};