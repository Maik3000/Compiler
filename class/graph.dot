digraph AST {
    node1 [label="ProgramNode\nProgram"];
    node1 -> node2;
    node2 [label="MultipleVarDeclaration"];
    node2 -> node3;
    node3 [label="VarDeclaration\nentrada"];
    node3 -> node4;
    node4 [label="Type\nboolean"];
    node1 -> node5;
    node5 [label="MultipleVarDeclaration"];
    node5 -> node6;
    node6 [label="VarDeclaration\nnumeros"];
    node6 -> node7;
    node7 [label="Type\nint"];
    node1 -> node8;
    node8 [label="MethodDeclaration\nsuma"];
    node8 -> node9;
    node9 [label="Type\nint"];
    node8 -> node10;
    node10 [label="Parameter\nvalor1"];
    node10 -> node11;
    node11 [label="Type\nint"];
    node8 -> node12;
    node12 [label="Parameter\nvalor2"];
    node12 -> node13;
    node13 [label="Type\nint"];
    node8 -> node14;
    node14 [label="BlockNode"];
    node14 -> node15;
    node15 [label="VarDeclaration\nres"];
    node15 -> node16;
    node16 [label="Type\nint"];
    node14 -> node17;
    node17 [label="AssignmentStatement\nOperator: ="];
    node17 -> node18;
    node18 [label="VariableLocation\nres"];
    node17 -> node19;
    node19 [label="BinaryExpression\nOperator: +"];
    node19 -> node20;
    node20 [label="VariableLocation\nvalor1"];
    node19 -> node21;
    node21 [label="VariableLocation\nvalor2"];
    node14 -> node22;
    node22 [label="ReturnStatement"];
    node22 -> node23;
    node23 [label="VariableLocation\nres"];
    node1 -> node24;
    node24 [label="MethodDeclaration\nmain"];
    node24 -> node25;
    node25 [label="Type\nvoid"];
    node24 -> node26;
    node26 [label="BlockNode"];
    node26 -> node27;
    node27 [label="VarDeclaration\nresultado1"];
    node27 -> node28;
    node28 [label="Type\nint"];
    node26 -> node29;
    node29 [label="VarDeclaration\nresultado2"];
    node29 -> node28;
    node28 [label="Type\nint"];
    node26 -> node30;
    node30 [label="VarDeclaration\nresultado3"];
    node30 -> node31;
    node31 [label="Type\nboolean"];
    node26 -> node32;
    node32 [label="AssignmentStatement\nOperator: ="];
    node32 -> node33;
    node33 [label="VariableLocation\nentrada"];
    node32 -> node34;
    node34 [label="BooleanLiteral\ntrue"];
    node26 -> node35;
    node35 [label="IfStatement"];
    node35 -> node36;
    node36 [label="BinaryExpression\nOperator: =="];
    node36 -> node37;
    node37 [label="VariableLocation\nentrada"];
    node36 -> node38;
    node38 [label="BooleanLiteral\ntrue"];
    node35 -> node39;
    node39 [label="BlockNode"];
    node39 -> node40;
    node40 [label="AssignmentStatement\nOperator: ="];
    node40 -> node41;
    node41 [label="VariableLocation\nresultado1"];
    node40 -> node42;
    node42 [label="NormalMethodCall\nsuma"];
    node42 -> node43;
    node43 [label="IntegerLiteral\n3"];
    node42 -> node44;
    node44 [label="IntegerLiteral\n2"];
    node26 -> node45;
    node45 [label="AssignmentStatement\nOperator: ="];
    node45 -> node46;
    node46 [label="VariableLocation\nentrada"];
    node45 -> node47;
    node47 [label="BooleanLiteral\nfalse"];
    node26 -> node48;
    node48 [label="IfStatement"];
    node48 -> node49;
    node49 [label="BinaryExpression\nOperator: =="];
    node49 -> node50;
    node50 [label="VariableLocation\nentrada"];
    node49 -> node51;
    node51 [label="BooleanLiteral\ntrue"];
    node48 -> node52;
    node52 [label="BlockNode"];
    node52 -> node53;
    node53 [label="AssignmentStatement\nOperator: ="];
    node53 -> node54;
    node54 [label="VariableLocation\nresultado1"];
    node53 -> node55;
    node55 [label="NormalMethodCall\nresta"];
    node55 -> node56;
    node56 [label="IntegerLiteral\n3"];
    node55 -> node57;
    node57 [label="IntegerLiteral\n2"];
}
