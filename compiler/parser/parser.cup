package parser;
import scanner.Scanner;
import parser.sym;
import ast.*;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;

import java.io.FileReader;
import java.io.IOException;

parser code {:
    private Scanner scanner;

    public Parser(Scanner scanner) {
        super();
        this.scanner = scanner;
    }

    public Symbol parse(String filename) throws Exception {
        try {
            scanner = new Scanner(new FileReader(filename));
            return this.parse();
        } catch (IOException e) {
            throw new RuntimeException("Error al leer el archivo: " + e.getMessage());
        }
    }

    @Override
    public Symbol scan() throws Exception {
        return scanner.next_token();
    }

    public void syntax_error(Symbol s) {
    String tokenName = sym.terminalNames[s.sym];
    String tokenValue = s.value == null ? "" : s.value.toString();
    String errorMessage = String.format(
        "Error Sintáctico en la Línea %d, Columna %d: Token '%s' no reconocido. Tipo: %s",
        s.left, s.right, tokenValue, tokenName
    );

    System.err.println(errorMessage);
}
:};

/* terminals */

terminal CLASS, VOID;
terminal IF, ELSE, FOR, RETURN, BREAK, CONTINUE;
terminal ASSIGN;
terminal SEMI, COMMA, LBRACKET, RBRACKET, LPAREN, RPAREN, LBRACE, RBRACE;
terminal PLUS, MINUS, TIMES, DIVIDE;
terminal LESS_THAN, GREATHER_THAN, LESS_THAN_EQUALS, GREATHER_THAN_EQUALS, EQUALS_EQUALS, NOT_EQUALS;
terminal AND, OR, NOT;
terminal CALLOUT;
terminal INT, BOOLEAN;
terminal TRUE, FALSE;
terminal String ID, PROGRAM;
terminal Integer INT_LITERAL;
terminal Character CHAR_LITERAL;
terminal String STRING_LITERAL;

/* Non-terminals */
non terminal Program program;
non terminal FieldDeclList field_decl_list;
non terminal FieldDecl field_decl;
non terminal FieldList field_list;
non terminal Field field;
non terminal MethodDeclList method_decl_list;
non terminal MethodDecl method_decl;
non terminal Block block;
non terminal VarDeclList var_decl_list;
non terminal VarDecl var_decl;
non terminal Type type;
non terminal StatementList statement_list;
non terminal Statement statement;
non terminal AssignOp assign_op;
non terminal MethodCall method_call;
non terminal MethodName method_name;
non terminal Location location;
non terminal Expr expr;
non terminal CalloutArgList callout_arg_list;
non terminal CalloutArg callout_arg;
non terminal BinOp bin_op;
non terminal ArithOp arith_op;
non terminal RelOp rel_op;
non terminal EqOp eq_op;
non terminal CondOp cond_op;
non terminal Literal literal;
non terminal BoolLiteral bool_literal;
non terminal IdListNode id_list;
non terminal ParamListNode param_list;

/* Precedences */
precedence left OR;
precedence left AND;
precedence left EQUALS_EQUALS, NOT_EQUALS;
precedence left LESS_THAN, GREATHER_THAN, LESS_THAN_EQUALS, GREATHER_THAN_EQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left INT, BOOLEAN;
precedence right NOT;

/* The grammar rules */
start with program;

program ::= CLASS ID:name LBRACE field_decl_list:fd method_decl_list:md RBRACE          {: RESULT = new Program(new IDNode(name), fd, md); :}
          | CLASS PROGRAM:name LBRACE field_decl_list:fd method_decl_list:md RBRACE     {: RESULT = new Program(new IDNode(name), fd, md); :};
          
field_decl_list ::= field_decl_list:fd field_decl:f                                     {: RESULT = fd.addField(f); :}
                  | /* empty */                                                         {: RESULT = new FieldDeclList(); :};

field_decl ::= type:t field_list:fl SEMI                                                {: RESULT = new FieldDecl(t, fl); :};

field_list ::= field_list:fl COMMA field:f                                              {: RESULT = fl.addField(f); :}
              | field:f                                                                 {: RESULT = new FieldList(f); :};

field ::= ID:id type:t                                                                  {: RESULT = new Field(new IDNode(id), t); :}
        | ID:id LBRACKET INT_LITERAL:size RBRACKET type:t                               {: RESULT = new ArrayFieldNode(new IDNode(id), new IntLiteral(size), t); :};
            
method_decl_list ::= method_decl_list:md method_decl:m                                  {: RESULT = md.addMethod(m); :}
                   | /* empty */                                                        {: RESULT = new MethodDeclList(); :};

/* Definición de method_decl */
method_decl ::= type:t ID:id LPAREN param_list:pl RPAREN block:b                        {: RESULT = new MethodDecl(t, new IDNode(id), pl, b); :}
               | VOID ID:id LPAREN param_list:pl RPAREN block:b                         {: RESULT = new MethodDecl(new VoidTypeNode(), new IDNode(id), pl, b); :};

/* Definición de param_list */
param_list ::= param_list:pl COMMA type:t ID:id                                         {: RESULT = pl.addParam(new ParamNode(t, new IDNode(id))); :}
              | type:t ID:id                                                            {: RESULT = new ParamListNode(new ParamNode(t, new IDNode(id))); :}
              | /* empty */                                                             {: RESULT = new ParamListNode(); :};

/* Definición de block */
block ::= LBRACE var_decl_list:vl statement_list:sl RBRACE                              {: RESULT = new Block(vl, sl); :};

/* Definición de var_decl_list */
var_decl_list ::= var_decl_list:vl var_decl:v                                           {: RESULT = vl.addVarDecl(v); :}
                 | /* empty */                                                          {: RESULT = new VarDeclList(); :};

/* Definición de var_decl */
var_decl ::= type:t id_list:il SEMI                                                     {: RESULT = new VarDecl(t, il); :};

/* Definición de id_list */
id_list ::= id_list:il COMMA ID:id                                                      {: RESULT = il.addID(new IDNode(id)); :}
           | ID:id                                                                      {: RESULT = new IdListNode(new IDNode(id)); :};

/* Definición de type */
type ::= INT                                                                            {: RESULT = new IntTypeNode(); :}
        | BOOLEAN                                                                       {: RESULT = new BooleanTypeNode(); :};

/* Definición de statement_list */
statement_list ::= statement_list:sl statement:s                                        {: RESULT = sl.addStatement(s); :}
                  | /* empty */                                                         {: RESULT = new StatementList(); :};

/* Definición de statement */
statement ::= location:loc ASSIGN assign_op:op expr:e SEMI                              {: RESULT = new AssignOp(loc, op.getOperator(), e); :}
            | method_call:mc SEMI                                                       {: RESULT = new MethodCallStatementNode(mc); :}
            | IF LPAREN expr:e RPAREN block:b ELSE block:eb                             {: RESULT = new IfElseNode(e, b, eb); :}
            | IF LPAREN expr:e RPAREN block:b                                           {: RESULT = new IfNode(e, b); :}
            | FOR ID:id ASSIGN expr:from COMMA expr:to block:b                          {: RESULT = new ForNode(new IDNode(id), from, to, b); :}
            | RETURN expr:e SEMI                                                        {: RESULT = new ReturnNode(e); :}
            | BREAK SEMI                                                                {: RESULT = new BreakNode(); :}
            | CONTINUE SEMI                                                             {: RESULT = new ContinueNode(); :}
            | block:b                                                                   {: RESULT = b; :};

/* Definición de assign_op */
assign_op ::= ASSIGN                                                                    {: RESULT = new AssignOp(null, "=", null); :};

method_call ::= method_name:m LPAREN RPAREN                                             {: RESULT = new MethodCall(m); :}
              | method_name:m LPAREN expr:e RPAREN                                      {: RESULT = new MethodCall(m, e); :}
              | method_name:m LPAREN expr:e COMMA expr:e2 RPAREN                        {: RESULT = new MethodCall(m, e, e2); :}
              | CALLOUT LPAREN STRING_LITERAL:str COMMA callout_arg_list:c RPAREN       {: RESULT = new MethodCall(new MethodName(str), c.getArgs()); :};

method_name ::= ID:name                                                                 {: RESULT = new MethodName(name); :};

location ::= ID:name                                                                    {: RESULT = new Location(name); :}
           | ID:name LBRACKET expr:e RBRACKET                                           {: RESULT = new Location(name, e); :};

expr ::= location:l
          {: RESULT = l; :}
       | method_call:m
          {: RESULT = m; :}
       | literal:li
          {: RESULT = li; :}
       | expr:e1 bin_op:b expr:e2
          {: RESULT = new BinaryExpr(e1, b, e2); :}
       | MINUS expr:e
          {: RESULT = new UnaryExpr("-", e); :}
       | NOT expr:e
          {: RESULT = new UnaryExpr("!", e); :}
       | LPAREN expr:e RPAREN
          {: RESULT = e; :};

callout_arg_list ::= callout_arg_list:c COMMA callout_arg:a
                     {: RESULT = ((CalloutArgList)c).add(a); :}
                   | callout_arg:a
                     {: RESULT = new CalloutArgList(a); :};

callout_arg ::= expr:e
                 {: RESULT = new CalloutArg(e); :}
              | STRING_LITERAL:str
                 {: RESULT = new CalloutArg(new StringLiteral(str)); :};

bin_op ::= arith_op
           {: RESULT = RESULT; :}
         | rel_op
           {: RESULT = RESULT; :}
         | eq_op
           {: RESULT = RESULT; :}
         | cond_op
           {: RESULT = RESULT; :};

arith_op ::= PLUS {: RESULT = new ArithOp("+"); :}
           | MINUS {: RESULT = new ArithOp("-"); :}
           | TIMES {: RESULT = new ArithOp("*"); :}
           | DIVIDE {: RESULT = new ArithOp("/"); :};

rel_op ::= LESS_THAN {: RESULT = new RelOp("<"); :}
         | GREATHER_THAN {: RESULT = new RelOp(">"); :}
         | LESS_THAN_EQUALS {: RESULT = new RelOp("<="); :}
         | GREATHER_THAN_EQUALS {: RESULT = new RelOp(">="); :};

eq_op ::= EQUALS_EQUALS {: RESULT = new EqOp("=="); :}
        | NOT_EQUALS {: RESULT = new EqOp("!="); :};

cond_op ::= AND {: RESULT = new CondOp("&&"); :}
          | OR {: RESULT = new CondOp("||"); :};

literal ::= INT_LITERAL:i
             {: RESULT = new IntLiteral(i); :}
          | CHAR_LITERAL:ch
             {: RESULT = new CharLiteral(ch); :}
          | bool_literal:bl
             {: RESULT = bl; :};

bool_literal ::= TRUE {: RESULT = new BoolLiteral(true); :}
               | FALSE {: RESULT = new BoolLiteral(false); :};
